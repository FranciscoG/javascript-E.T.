{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/draw.js",
    "src/sound.js",
    "src/utils.js",
    "src/vcs.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\nvar utils = require('./utils.js');\n\n/*\n  A very helpful tutorial on how the 2600 works\n  http://atariage.com/forums/topic/33233-sorted-table-of-contents/\n*/\n\nfunction SpriteDrawer(sprite, options) {\n  if (!sprite) {\n    return; // return undefined\n  }\n\n  var defaults = {\n    color : \"#696969\"\n  };\n  var _opts = Object.assign({}, defaults, options);\n\n  // create our canvas that will hold our sprite image\n  // and will be returned in the end\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext(\"2d\");\n\n  function repl(match, p1) {\n    return utils.hex2bin(p1);\n  }\n  sprite = sprite.trim().replace(/.*\\$([a-f0-9]{2}).*\\n?/gi, repl);\n\n  canvas.height = sprite.match(/%?[0-1]{8}[\\s\\n]*/g).length;\n  canvas.width = 8;\n  sprite = sprite.split(\"\");\n\n  var _n = 0;\n  var rbgArr = utils.hex2rgb(_opts.color);\n  var imgData = ctx.createImageData(8, sprite.length);\n\n  for (var i = 0; i < imgData.data.length; i += 4) {\n    imgData.data[i + 0] = parseInt(rbgArr[0], 10);\n    imgData.data[i + 1] = parseInt(rbgArr[1], 10);\n    imgData.data[i + 2] = parseInt(rbgArr[2], 10);\n    if (sprite[_n] === \"1\") {\n      imgData.data[i + 3] = 255;\n    } else {\n      imgData.data[i + 3] = 0;\n    }\n    _n++;\n  }\n  ctx.putImageData(imgData, 0, 0);\n\n  return canvas;\n}\n\nmodule.exports = SpriteDrawer;",
    "/*\nhttp://www.qotile.net/files/2600_music_guide.txt\nhttp://www.popular-musicology-online.com/issues/01/collins-01.html\n===================================================================\n2 TIA Sound Overview\n===================================================================\n\nThe TIA is the chip in the Atari 2600 that produces audio and video.  The audio portion has two independent voices, each of which has a 4 bit volume control (16 values), 5 bit pitch (32 values), and a 4 bit control register which selects the type of sound you will hear.  When writing software for the Atari, the standard labels for these registers are AUDV0 and AUDV1 for the volume registers, AUDF0 and AUDF1 for the pitch registers, and AUDC0 and AUDC1 for the control registers.  The 5 bit pitch is very limited and the frequency values are simply divided down from the system clock, so many of the pitch values are not in-tune with others.  Note that setting the pitch register to a lower value results in a higher pitch.\n\n2 independent voices\n- 4 bit volume (16 values)\n- 5 bit pitch (32 values)\n- 4 bit rcontrol egister: \n-- AUDV0 and AUDV1 for the volume registers\n-- AUDF0 and AUDF1 for the pitch registers\n-- AUDC0 and AUDC1 for the control registers\n\n;============================================================================\n; T I A - M U S I C  C O N S T A N T S\n;============================================================================\n \nSOUND_CHANNEL_SAW       = 1         ; sounds similar to a saw waveform\nSOUND_CHANNEL_ENGINE    = 3         ; many games use this for an engine sound\nSOUND_CHANNEL_SQUARE    = 4         ; a high pitched square waveform\nSOUND_CHANNEL_BASS      = 6         ; fat bass sound\nSOUND_CHANNEL_PITFALL   = 7         ; log sound in pitfall, low and buzzy\nSOUND_CHANNEL_NOISE     = 8         ; white noise\nSOUND_CHANNEL_LEAD      = 12        ; lower pitch square wave sound\nSOUND_CHANNEL_BUZZ      = 15        ; atonal buzz, good for percussion\n \nLEAD_F4_SHARP           = 13\nLEAD_E4                 = 15\nLEAD_D4_SHARP           = 16\nLEAD_D4                 = 17\nLEAD_C4_SHARP           = 18\nLEAD_H3                 = 20\nLEAD_A3                 = 23\nLEAD_G3_SHARP           = 24\nLEAD_F3_SHARP           = 27\nLEAD_E3_2               = 31\n\nthemeMusicNoteDelay     = $EE\nthemeMusicFreqIndex     = $EF\n\n\nPlayThemeMusic\n   lda #7\n   sta AUDV1\n   lda #SOUND_CHANNEL_LEAD\n   sta AUDC1\n   ldx themeMusicNoteDelay          ; get theme music note delay value\n   dex\n   bpl .playCurrentThemeNote        ; hold note if not negative\n   ldx #11                          ; initial hold note delay\n   ldy themeMusicFreqIndex          ; get theme music frequency index\n   iny                              ; increment frequency index\n   cpy #55\n   bcc .setThemeMusicFreqIndex\n   ldy #0\n\n\n\tWebAudio API help:\n\thttp://modernweb.com/2014/03/31/creating-sound-with-the-web-audio-api-and-oscillators/\n */\n\n\nvar notes = {\n  'C0': 16.35,\n  'C#0': 17.32,\n  'Db0': 17.32,\n  'D0': 18.35,\n  'D#0': 19.45,\n  'Eb0': 19.45,\n  'E0': 20.60,\n  'F0': 21.83,\n  'F#0': 23.12,\n  'Gb0': 23.12,\n  'G0': 24.50,\n  'G#0': 25.96,\n  'Ab0': 25.96,\n  'A0': 27.50,\n  'A#0': 29.14,\n  'Bb0': 29.14,\n  'B0': 30.87,\n  'C1': 32.70,\n  'C#1': 34.65,\n  'Db1': 34.65,\n  'D1': 36.71,\n  'D#1': 38.89,\n  'Eb1': 38.89,\n  'E1': 41.20,\n  'F1': 43.65,\n  'F#1': 46.25,\n  'Gb1': 46.25,\n  'G1': 49.00,\n  'G#1': 51.91,\n  'Ab1': 51.91,\n  'A1': 55.00,\n  'A#1': 58.27,\n  'Bb1': 58.27,\n  'B1': 61.74,\n  'C2': 65.41,\n  'C#2': 69.30,\n  'Db2': 69.30,\n  'D2': 73.42,\n  'D#2': 77.78,\n  'Eb2': 77.78,\n  'E2': 82.41,\n  'F2': 87.31,\n  'F#2': 92.50,\n  'Gb2': 92.50,\n  'G2': 98.00,\n  'G#2': 103.83,\n  'Ab2': 103.83,\n  'A2': 110.00,\n  'A#2': 116.54,\n  'Bb2': 116.54,\n  'B2': 123.47,\n  'C3': 130.81,\n  'C#3': 138.59,\n  'Db3': 138.59,\n  'D3': 146.83,\n  'D#3': 155.56,\n  'Eb3': 155.56,\n  'E3': 164.81,\n  'F3': 174.61,\n  'F#3': 185.00,\n  'Gb3': 185.00,\n  'G3': 196.00,\n  'G#3': 207.65,\n  'Ab3': 207.65,\n  'A3': 220.00,\n  'A#3': 233.08,\n  'Bb3': 233.08,\n  'B3': 246.94,\n  'C4': 261.63,\n  'C#4': 277.18,\n  'Db4': 277.18,\n  'D4': 293.66,\n  'D#4': 311.13,\n  'Eb4': 311.13,\n  'E4': 329.63,\n  'F4': 349.23,\n  'F#4': 369.99,\n  'Gb4': 369.99,\n  'G4': 392.00,\n  'G#4': 415.30,\n  'Ab4': 415.30,\n  'A4': 440.00,\n  'A#4': 466.16,\n  'Bb4': 466.16,\n  'B4': 493.88,\n  'C5': 523.25,\n  'C#5': 554.37,\n  'Db5': 554.37,\n  'D5': 587.33,\n  'D#5': 622.25,\n  'Eb5': 622.25,\n  'E5': 659.26,\n  'F5': 698.46,\n  'F#5': 739.99,\n  'Gb5': 739.99,\n  'G5': 783.99,\n  'G#5': 830.61,\n  'Ab5': 830.61,\n  'A5': 880.00,\n  'A#5': 932.33,\n  'Bb5': 932.33,\n  'B5': 987.77,\n  'C6': 1046.50,\n  'C#6': 1108.73,\n  'Db6': 1108.73,\n  'D6': 1174.66,\n  'D#6': 1244.51,\n  'Eb6': 1244.51,\n  'E6': 1318.51,\n  'F6': 1396.91,\n  'F#6': 1479.98,\n  'Gb6': 1479.98,\n  'G6': 1567.98,\n  'G#6': 1661.22,\n  'Ab6': 1661.22,\n  'A6': 1760.00,\n  'A#6': 1864.66,\n  'Bb6': 1864.66,\n  'B6': 1975.53,\n  'C7': 2093.00,\n  'C#7': 2217.46,\n  'Db7': 2217.46,\n  'D7': 2349.32,\n  'D#7': 2489.02,\n  'Eb7': 2489.02,\n  'E7': 2637.02,\n  'F7': 2793.83,\n  'F#7': 2959.96,\n  'Gb7': 2959.96,\n  'G7': 3135.96,\n  'G#7': 3322.44,\n  'Ab7': 3322.44,\n  'A7': 3520.00,\n  'A#7': 3729.31,\n  'Bb7': 3729.31,\n  'B7': 3951.07,\n  'C8': 4186.01\n};\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\nvar ctx = new AudioContext();\n\nfunction playNote(pitch, length, wave, vol) {\n  var frq = notes[pitch];\n  var o = ctx.createOscillator();\n  o.type = wave;\n  var g = ctx.createGain();\n  o.connect(g);\n  g.connect(ctx.destination);\n  g.gain.value = (typeof vol === \"undefined\" || vol === null) ? 0.1 : vol;\n\n  if (frq) {\n    o.frequency.value = frq;\n    o.start(0);\n    o.stop(length);\n  }\n}\n\n//playNote(\"A3\", 1, \"square\", 0.3);\n\n\nfunction playSequence(sequence, opts) {\n  if (!opts) { opts = {}; }\n  // set defaults\n  var _opts = {\n    bpm : (opts.bpm) ? opts.bpm : 300,\n    wave : (opts.wave) ? opts.wave : \"square\",\n    vol : (opts.vol) ? opts.vol : 0.1\n  };\n\n  var o, t = ctx.currentTime,\n    arrayLength = sequence.length,\n    playlength = 0;\n\n  for (var i = 0; i < arrayLength; i++) {\n    o = ctx.createOscillator();\n    // 1 second divided by number of beats per second times number of beats (length of a note)\n    playlength = 1 / (_opts.bpm / 60) * sequence[i].notelength;\n    o.type = _opts.wave;\n    o.frequency.value = sequence[i].frq;\n    o.start(t);\n    o.stop(t + playlength);\n    t += playlength;\n    var g = ctx.createGain();\n    o.connect(g);\n    g.connect(ctx.destination);\n    g.gain.value = _opts.vol;\n  }\n}\n\nmodule.exports = playSequence;",
    "'use strict';\n/**\n * Module containing an assortment of useful utility functions\n * @type {Object}\n */\nmodule.exports = {\n  \n  /**\n   * Usually Sprite Clocks are shown in Binary but in the Atari source code for E.T. it showed sprite clock/pixels in Hex\n   * So this converts those hex numbers to Binary\n   * @param  {string} hex the 2 character hex string\n   * @return {string}     the binary number as a string\n   */\n  hex2bin : function(hex) {\n\n    function pad(num, size) {\n      var s = \"000\" + num;\n      return s.substr(s.length - size);\n    }\n\n    var hexArr = hex.split(\"\");\n    var bin = \"\";\n    hexArr.forEach(function(e, i, arr) {\n      var dec = parseInt(arr[i], 16);\n      bin += pad(dec.toString(2), 4);\n    });\n    return bin;\n  },\n\n  /**\n   * Convert a Hex Color to RGB array\n   * @param  {string} hex   a full hex color string includeing the hash.  example: \"#99af34\"\n   * @return {object}       an array containing RGB info [R,G,B]\n   */\n  hex2rgb : function(hex) {\n    var hx = hex.substr(1);\n    var parts = hx.match(/[0-9A-Za-z]{2}/g);\n    parts.forEach(function(e, i, arr) {\n      parts[i] = parseInt(arr[i], 16);\n    });\n    return parts;\n  }\n};",
    "var sound = require('./sound.js');\nvar draw = require('./draw.js');\n\nvar vcs = {\n\n  draw : draw\n};\n\nwindow.vcs = vcs;\n\n// loading system that caches renders of sprites\n// "
  ]
}